{
    "abbrev": "",
    "description": [
        "Example: First argument in $ \\sqrt{ n^{2k} }{-1} $ is optional, so it should be $ \\sqrt[ n^{2k} ]{-1} $. Move the cursor to any of the characters from the first one inside up to the first immediately following the pair of braces you want to change, then apply the macro. Opening and closing parantheses musst be in the same line. The cursor ends up after the right parentheses."
    ],
    "formatVersion": 1,
    "menu": "",
    "name": "Cycle a pair of parentheses between (...), {...}, and [...]",
    "shortcut": "Alt+Y",
    "tag": [
        "%SCRIPT",
        "/* V2.1 2023-03-04 by octaeder */",
        "let char;",
        "let leftEnd, rightEnd;",
        "let newLeftChar, newRightChar;",
        "let crsrLine = cursor.lineNumber();",
        "let crsrCol = cursor.columnNumber();",
        "let line = editor.text(crsrLine).split(\"\");",
        "let level = 1;",
        "// move 1 to the left (we might be right to a closing parentheses)",
        "if (crsrCol > 0) {",
        "    char = line[crsrCol-1];",
        "    if (!(char == \"(\" || char == \"{\" || char == \"[\")) {",
        "        crsrCol--;",
        "    }",
        "}",
        "// search to the right",
        "let i = crsrCol;",
        "while (i < line.length && level > 0) {",
        "    char = line[i];",
        "    if (char == \"(\" || char == \"{\" || char == \"[\") {",
        "        level++;",
        "        i++;",
        "    }",
        "    else if (char == \")\" || char == \"}\" || char == \"]\") {",
        "        level--;",
        "        if (level > 0) {",
        "            i++;",
        "        }",
        "    }",
        "    else {",
        "        i++;",
        "    }",
        "}",
        "",
        "if (i < line.length && crsrCol > 0) {",
        "    rightEnd = i;",
        "    level = 1;",
        "    //search to the left",
        "    i = crsrCol - 1;",
        "    while (i >= 0 && level > 0) {",
        "        char = line[i];",
        "        if (char == \")\" || char == \"}\" || char == \"]\") {",
        "            level++;",
        "            i--;",
        "        }",
        "        else if (char == \"(\" || char == \"{\" || char == \"[\") {",
        "            level--;",
        "            if (level > 0) {",
        "                i--;",
        "            }",
        "        } ",
        "        else {",
        "            i--;",
        "        }",
        "    }",
        "    if (i > -1) {",
        "        leftEnd = i;",
        "        if (line[leftEnd] == \"(\") {",
        "            newLeftChar = \"{\";",
        "            newRightChar = \"}\";",
        "        }",
        "        else if (line[leftEnd] == \"{\") {",
        "            newLeftChar = \"[\";",
        "            newRightChar = \"]\";",
        "        }",
        "        else {",
        "            newLeftChar = \"(\";",
        "            newRightChar = \")\";",
        "        }",
        "        let subtext;",
        "        cursor.beginEditBlock();",
        "        cursor.selectColumns( leftEnd, rightEnd + 1);",
        "        subtext = cursor.selectedText();",
        "        subtext = subtext.substr( 1, subtext.length - 2);",
        "        cursor.removeSelectedText();",
        "        editor.write( newLeftChar + subtext + newRightChar);",
        "        cursor.endEditBlock();",
        "    }",
        "}",
        ""
    ],
    "trigger": ""
}
